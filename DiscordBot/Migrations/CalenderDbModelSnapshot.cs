// <auto-generated />
using System;
using DiscordBot.Classes.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DiscordBot.Migrations
{
    [DbContext(typeof(CalenderDb))]
    partial class CalenderDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("DiscordBot.Classes.Calender.Attendee", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<long>("_userId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId");

                    b.HasKey("EventId", "_userId");

                    b.ToTable("Attendees");
                });

            modelBuilder.Entity("DiscordBot.Classes.Calender.CalenderEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.Property<long>("_createdById")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedById");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DiscordBot.Classes.Calender.CalenderSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("EndRecur")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecursOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartRecur")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("DiscordBot.Classes.Calender.Attendee", b =>
                {
                    b.HasOne("DiscordBot.Classes.Calender.CalenderEvent", "Event")
                        .WithMany("Attendees")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DiscordBot.Classes.Calender.CalenderEvent", b =>
                {
                    b.HasOne("DiscordBot.Classes.Calender.CalenderSeries", "Series")
                        .WithMany("Events")
                        .HasForeignKey("SeriesId");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("DiscordBot.Classes.Calender.CalenderEvent", b =>
                {
                    b.Navigation("Attendees");
                });

            modelBuilder.Entity("DiscordBot.Classes.Calender.CalenderSeries", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
