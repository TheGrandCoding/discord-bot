// <auto-generated />
using System;
using DiscordBot.Classes;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiscordBot.Migrations.BotDb
{
    [DbContext(typeof(BotDbContext))]
    [Migration("20230225122353_InitUserDB")]
    partial class InitUserDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DiscordBot.Classes.BotDbApprovedIP", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "IP");

                    b.ToTable("BotDbApprovedIP");
                });

            modelBuilder.Entity("DiscordBot.Classes.BotDbAuthSession", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("AuthSessions");
                });

            modelBuilder.Entity("DiscordBot.Classes.BotDbAuthToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("AuthTokens");
                });

            modelBuilder.Entity("DiscordBot.Classes.BotDbPermission", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("PermNode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "PermNode");

                    b.ToTable("BotDbPermission");
                });

            modelBuilder.Entity("DiscordBot.Classes.BotDbUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DiscordBot.Classes.BotDbApprovedIP", b =>
                {
                    b.HasOne("DiscordBot.Classes.BotDbUser", "User")
                        .WithMany("ApprovedIPs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiscordBot.Classes.BotDbAuthSession", b =>
                {
                    b.HasOne("DiscordBot.Classes.BotDbUser", "User")
                        .WithMany("AuthSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiscordBot.Classes.BotDbAuthToken", b =>
                {
                    b.HasOne("DiscordBot.Classes.BotDbUser", "User")
                        .WithMany("AuthTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiscordBot.Classes.BotDbPermission", b =>
                {
                    b.HasOne("DiscordBot.Classes.BotDbUser", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiscordBot.Classes.BotDbUser", b =>
                {
                    b.OwnsOne("DiscordBot.Classes.BotDbConnections", "Connections", b1 =>
                        {
                            b1.Property<long>("BotDbUserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("DiscordId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PasswordHash")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("BotDbUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("BotDbUserId");
                        });

                    b.OwnsOne("DiscordBot.Classes.BotDbUserOptions", "Options", b1 =>
                        {
                            b1.Property<long>("BotDbUserId")
                                .HasColumnType("bigint");

                            b1.Property<int>("PairedVoiceChannels")
                                .HasColumnType("int");

                            b1.Property<int>("WhenToNotifyIsolation")
                                .HasColumnType("int");

                            b1.HasKey("BotDbUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("BotDbUserId");
                        });

                    b.Navigation("Connections")
                        .IsRequired();

                    b.Navigation("Options")
                        .IsRequired();
                });

            modelBuilder.Entity("DiscordBot.Classes.BotDbUser", b =>
                {
                    b.Navigation("ApprovedIPs");

                    b.Navigation("AuthSessions");

                    b.Navigation("AuthTokens");

                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
